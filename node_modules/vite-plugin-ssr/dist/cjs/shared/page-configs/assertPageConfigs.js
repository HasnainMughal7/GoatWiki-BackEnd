"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertPageConfigs = void 0;
const utils_1 = require("../utils");
function assertPageConfigs(pageConfigs) {
    (0, utils_1.assert)(Array.isArray(pageConfigs) || pageConfigs === null);
    // TODO: remove obsolete comment?
    // if `pageConfigFilesCannotBeLoaded === null` => then `import.meta.glob('/**/+config.${scriptFileExtensions}', { eager: true })` cannot be transpiled/loaded => code of virtual file cannot be generated or run => assertPageConfigs() is never called
    (0, utils_1.assert)(pageConfigs !== null);
    pageConfigs.forEach((pageConfig) => {
        (0, utils_1.assert)((0, utils_1.isObject)(pageConfig));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'pageId2', 'string'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'pageConfigFilePathAll', 'string[]'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'routeFilesystem', 'string') || (0, utils_1.hasProp)(pageConfig, 'routeFilesystem', 'null'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'routeFilesystemDefinedBy', 'string'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'loadCodeFiles', 'function'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'isErrorPage', 'boolean'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'configSources', 'object'));
        Object.entries(pageConfig.configSources).forEach(([configName, configSource]) => {
            (0, utils_1.assert)((0, utils_1.hasProp)(configSource, 'configSrc', 'string'));
            (0, utils_1.assert)((0, utils_1.hasProp)(configSource, 'configFilePath2', 'string') || (0, utils_1.hasProp)(configSource, 'configFilePath2', 'null'));
            (0, utils_1.assert)((0, utils_1.hasProp)(configSource, 'c_env', 'string'));
            (0, utils_1.assert)((0, utils_1.hasProp)(configSource, 'codeFilePath2', 'string') || (0, utils_1.hasProp)(configSource, 'codeFilePath2', 'null'));
            if (configSource.codeFilePath2) {
                const { codeFilePath2 } = configSource;
                if (configName === 'route') {
                    (0, utils_1.assert)((0, utils_1.hasProp)(configSource, 'configValue')); // route files are eagerly loaded
                    const { configValue } = configSource;
                    const configValueType = typeof configValue;
                    // TODO: validate earlier?
                    (0, utils_1.assertUsage)(configValueType === 'string' || (0, utils_1.isCallable)(configValue), `${codeFilePath2} has a default export with an invalid type '${configValueType}': the default export should be a string or a function`);
                }
            }
        });
    });
}
exports.assertPageConfigs = assertPageConfigs;
