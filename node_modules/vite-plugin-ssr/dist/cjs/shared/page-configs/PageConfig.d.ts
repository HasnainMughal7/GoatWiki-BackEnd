export type { PageConfig };
export type { PageConfigLoaded };
export type { PageConfigGlobal };
export type { c_Env };
export type { PageConfigData };
export type { ConfigName };
export type { ConfigSource };
declare type c_Env = 'client-only' | 'server-only' | 'server-and-client' | 'c_routing' | 'c_config';
declare type ConfigName = 'onRenderHtml' | 'onRenderClient' | 'onBeforeRender' | 'onHydrationEnd' | 'onPageTransitionStart' | 'onPageTransitionEnd' | 'onPrerender' | 'prerender' | 'Page' | 'passToClient' | 'route' | 'iKnowThePerformanceRisksOfAsyncRouteFunctions' | 'isErrorPage' | 'hydrationCanBeAborted' | 'clientEntry' | 'clientRouting';
declare type ConfigSoureFile = {
    configSrc: string;
    configDefinedByFile: string;
} & ({
    configFilePath2: string;
    codeFilePath2: null;
} | {
    configFilePath2: null;
    codeFilePath2: string;
} | {
    configFilePath2: string;
    codeFilePath2: string;
});
declare type ConfigSource = ConfigSoureFile & {
    c_env: c_Env;
    configValue?: unknown;
};
declare type PageConfigData = {
    pageId2: string;
    isErrorPage: boolean;
    pageConfigFilePathAll: string[];
    routeFilesystem: null | string;
    routeFilesystemDefinedBy: string;
    configSources: Partial<Record<ConfigName, ConfigSource>>;
};
declare type PageConfig = PageConfigData & {
    loadCodeFiles: () => Promise<{
        configName: string;
        codeFilePath3: string;
        codeFileExports: Record<string, unknown>;
    }[]>;
};
declare type PageConfigLoaded = PageConfig & {
    configValues: Partial<Record<ConfigName, unknown>>;
};
declare type PageConfigGlobal = Partial<Record<ConfigName, {
    configFilePath: string;
    configValue: unknown;
}>>;
