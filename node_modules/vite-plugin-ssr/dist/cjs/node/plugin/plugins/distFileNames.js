"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.distFileNames = void 0;
// Attempt to preserve file structure of `.page.js` files:
//  - https://github.com/brillout/vite-plugin-ssr/commit/11a4c49e5403aa7c37c8020c462b499425b41854
//  - Blocker: https://github.com/rollup/rollup/issues/4724
const utils_1 = require("../utils");
const path_1 = __importDefault(require("path"));
const determinePageId_1 = require("../../../shared/determinePageId");
const deduceRouteStringFromFilesystemPath_1 = require("../../../shared/route/deduceRouteStringFromFilesystemPath");
const extractAssetsPlugin_1 = require("./extractAssetsPlugin");
function distFileNames() {
    return {
        name: 'vite-plugin-ssr:distFileNames',
        apply: 'build',
        enforce: 'post',
        configResolved(config) {
            const rollupOutputs = getRollupOutputs(config);
            // We need to support multiple outputs: @vite/plugin-legacy adds an ouput, see https://github.com/brillout/vite-plugin-ssr/issues/477#issuecomment-1406434802
            rollupOutputs.forEach((rollupOutput) => {
                if (!rollupOutput.entryFileNames) {
                    if (!config.build.ssr) {
                        const assetsDir = getAssetsDir(config);
                        rollupOutput.entryFileNames = `${assetsDir}/[name].[hash].js`;
                    }
                    else {
                        // We let Vite set the name of server entries
                    }
                }
                if (!rollupOutput.chunkFileNames) {
                    rollupOutput.chunkFileNames = (chunkInfo) => getChunkFileName(chunkInfo, config);
                }
                if (!rollupOutput.assetFileNames) {
                    rollupOutput.assetFileNames = (chunkInfo) => getAssetFileName(chunkInfo, config);
                }
            });
        }
    };
}
exports.distFileNames = distFileNames;
const BLACK_LIST = [
/* There used to exist a file client/assertRenderHook.ts
 * We need to check whether we still need such black list for Rollup 4
'assertRenderHook.css'
*/
];
function getAssetFileName(assetInfo, config) {
    const assetsDir = getAssetsDir(config);
    const filename = assetInfo.name && path_1.default.basename(assetInfo.name);
    // Not sure when/why this happens
    if (filename && BLACK_LIST.includes(filename)) {
        return `${assetsDir}/chunk-[hash][extname]`;
    }
    // dist/client/assets/index.page.server.jsx_extractAssets_lang.e4e33422.css
    // => dist/client/assets/index.page.server.e4e33422.css
    if (
    // Vite 2
    filename?.endsWith('_extractAssets_lang.css') ||
        // Vite 3
        filename?.endsWith('?extractAssets&lang.css')) {
        const filenameBase = filename.split('.').slice(0, -2).join('.');
        return `${assetsDir}/${filenameBase}.[hash][extname]`;
    }
    return `${assetsDir}/[name].[hash][extname]`;
}
function getChunkFileName(chunkInfo, config) {
    const { root } = config;
    (0, utils_1.assertPosixPath)(root);
    const assetsDir = getAssetsDir(config);
    const id = chunkInfo.facadeModuleId;
    /* TODO: remove
    if (chunkInfo.isDynamicEntry || chunkInfo.isEntry) {
      return `${assetsDir}/[name].[hash].js`
    }
    */
    if (id) {
        (0, utils_1.assertPosixPath)(id);
    }
    (0, utils_1.assertPosixPath)(root);
    if (!chunkInfo.isDynamicEntry ||
        !id ||
        id.includes('/node_modules/') ||
        !id.startsWith(root) ||
        (id.includes('.page.server.') && extractAssetsPlugin_1.extractAssetsRE.test(id))) {
        return `${assetsDir}/chunk-[hash].js`;
    }
    let { name } = chunkInfo;
    if (name.startsWith('index.page.') || name === 'index.page') {
        const chunkName = deduceChunkNameFromFilesystemRouting(id, root);
        if (chunkName) {
            name = name.replace('index', chunkName);
            return `${assetsDir}/${name}.[hash].js`;
        }
    }
    return `${assetsDir}/[name].[hash].js`;
}
function getRollupOutputs(config) {
    var _a, _b;
    // @ts-expect-error is read-only
    config.build ?? (config.build = {});
    (_a = config.build).rollupOptions ?? (_a.rollupOptions = {});
    (_b = config.build.rollupOptions).output ?? (_b.output = {});
    const { output } = config.build.rollupOptions;
    if (!Array.isArray(output)) {
        return [output];
    }
    return output;
}
function getAssetsDir(config) {
    let { assetsDir } = config.build;
    (0, utils_1.assertUsage)(assetsDir, `${assetsDir} cannot be an empty string`);
    assetsDir = assetsDir.split(/\/|\\/).filter(Boolean).join('/');
    return assetsDir;
}
function deduceChunkNameFromFilesystemRouting(id, root) {
    (0, utils_1.assert)(id?.startsWith(root), { id, root });
    const pathRelative = path_1.default.posix.relative(root, id);
    (0, utils_1.assert)(!pathRelative.startsWith('.') && !pathRelative.startsWith('/'), { id, root });
    const pageId = (0, determinePageId_1.determinePageId)('/' + pathRelative);
    const routeString = (0, deduceRouteStringFromFilesystemPath_1.deduceRouteStringFromFilesystemPath)(pageId, []);
    const dirS = routeString.split('/');
    const pageFileName = dirS[dirS.length - 1];
    return pageFileName ?? null;
}
