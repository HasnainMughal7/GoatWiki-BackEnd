"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.devConfig = void 0;
const vite_1 = require("vite");
const utils_1 = require("../utils");
const helpers_1 = require("../helpers");
const determineOptimizeDepsEntries_1 = require("./devConfig/determineOptimizeDepsEntries");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const assertConfigVps_1 = require("./config/assertConfigVps");
function devConfig() {
    let root;
    return [
        {
            name: 'vite-plugin-ssr:devConfig',
            async config(config) {
                root = (0, helpers_1.resolveRoot)(config); // TODO: remove resolveRoot() helper?
                // TODO: remove?
                // await loadPagesConfig(root)
                return {
                    ssr: { external: ['vite-plugin-ssr'] },
                    optimizeDeps: {
                        exclude: [
                            // We exclude the vite-plugin-ssr client to be able to use `import.meta.glob()`
                            'vite-plugin-ssr/client',
                            'vite-plugin-ssr/client/router',
                            'vite-plugin-ssr/routing',
                            // - We also exclude @brillout/json-serializer to avoid:
                            //   ```
                            //   9:28:58 AM [vite] ✨ new dependencies optimized: @brillout/json-serializer/parse
                            //   9:28:58 AM [vite] ✨ optimized dependencies changed. reloading
                            //   ```
                            // - Previously, we had to exclude @brillout/json-serializer because of pnpm, but this doesn't seem to be the case anymore
                            '@brillout/json-serializer/parse',
                            '@brillout/json-serializer/stringify'
                        ]
                    }
                };
            },
            async configResolved(config) {
                (0, helpers_1.assertRoot)(root, config);
                const configVps = await (0, assertConfigVps_1.getConfigVps)(config);
                addExtensionsToOptimizeDeps(config, configVps);
                addOptimizeDepsEntries(config, await (0, determineOptimizeDepsEntries_1.determineOptimizeDepsEntries)(config));
                await determineFsAllowList(config, configVps);
            },
            configureServer(server) {
                if (!(0, helpers_1.isViteCliCall)())
                    return;
                return () => {
                    (0, helpers_1.addSsrMiddleware)(server.middlewares, server);
                };
            }
        }
    ];
}
exports.devConfig = devConfig;
function addExtensionsToOptimizeDeps(config, configVps) {
    config.optimizeDeps.include = config.optimizeDeps.include ?? [];
    config.optimizeDeps.include.push(...configVps.extensions
        .map(({ pageFilesDist }) => pageFilesDist)
        .flat()
        .filter(utils_1.isNotNullish)
        .map(({ importPath }) => importPath));
    /* Doesn't work since `pageFilesSrc` is a directory. We could make it work by using find-glob.
    config.optimizeDeps.include.push(
      ...configVps.extensions
        .map(({ pageFilesSrc }) => pageFilesSrc)
        .flat()
        .filter(isNotNullish)
    )
    */
}
function addOptimizeDepsEntries(config, entries) {
    const total = [];
    const val = config.optimizeDeps.entries;
    if (typeof val === 'string') {
        total.push(val);
    }
    else if (Array.isArray(val)) {
        total.push(...val);
    }
    else {
        (0, utils_1.assert)(val === undefined);
    }
    total.push(...entries);
    config.optimizeDeps.entries = total;
}
async function determineFsAllowList(config, configVps) {
    const fsAllow = config.server.fs.allow;
    // fsAllow should already contain searchForWorkspaceRoot()
    (0, utils_1.assert)(fsAllow.length >= 1);
    fsAllow.push(process.cwd());
    // searchForWorkspaceRoot() is buggy: https://github.com/brillout/vite-plugin-ssr/issues/555.
    // BUt that's not a problem since Vite automatically inserts searchForWorkspaceRoot().
    // We add it again just to be sure.
    fsAllow.push((0, vite_1.searchForWorkspaceRoot)(process.cwd()));
    // Add node_modules/vite-plugin-ssr/
    {
        // [RELATIVE_PATH_FROM_DIST] Current directory: node_modules/vite-plugin-ssr/dist/cjs/node/plugin/plugins/
        const vitePluginSsrRoot = path_1.default.join(__dirname, '../../../../../');
        // Assert that `vitePluginSsrRoot` is indeed pointing to `node_modules/vite-plugin-ssr/`
        require.resolve(`${vitePluginSsrRoot}/dist/cjs/node/plugin/plugins/devConfig.js`);
        fsAllow.push(vitePluginSsrRoot);
    }
    // Add VPS extensions, e.g. node_modules/stem-react/
    configVps.extensions.forEach(({ npmPackageRootDir }) => {
        const npmPackageRootDirReal = fs_1.default.realpathSync(npmPackageRootDir);
        fsAllow.push(npmPackageRootDir);
        fsAllow.push(npmPackageRootDirReal);
    });
}
