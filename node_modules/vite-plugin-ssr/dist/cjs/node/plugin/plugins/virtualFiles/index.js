"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.virtualFiles = void 0;
const assertConfigVps_1 = require("../config/assertConfigVps");
const generatePageConfigsSourceCode_1 = require("./generatePageConfigsSourceCode");
const generatePageFilesVirtualFile_1 = require("./generatePageFilesVirtualFile");
const utils_1 = require("../../utils");
function virtualFiles() {
    let config;
    let configVps;
    let isDev = false;
    let loadHookWasCalled = false;
    return {
        name: 'vite-plugin-ssr:virtualFiles',
        config() {
            return {
                experimental: {
                    importGlobRestoreExtension: true
                }
            };
        },
        async configResolved(config_) {
            configVps = await (0, assertConfigVps_1.getConfigVps)(config_);
            config = config_;
        },
        resolveId(id) {
            if (id.startsWith('virtual:vite-plugin-ssr:')) {
                return '\0' + id;
            }
        },
        /* TODO: remove
        configureServer(server) {
          server.watcher.on('change', (filePath) => {
            console.log('filePath', filePath)
            // server.moduleGraph.onFileChange(virtualModuleIdPageFilesServer)
            // server.moduleGraph.onFileChange(virtualModuleIdPageFilesClientCR)
          })
        },
        */
        async load(id, options) {
            loadHookWasCalled = true;
            if (id.startsWith('\0virtual:vite-plugin-ssr:')) {
                id = id.slice('\0'.length);
            }
            else {
                return undefined;
            }
            {
                const code = await (0, generatePageConfigsSourceCode_1.generatePageConfigVirtualFile)(id, !options?.ssr, config.root, isDev);
                if (code)
                    return code;
            }
            const code = await (0, generatePageFilesVirtualFile_1.generatePageFilesVirtualFile)(id, options, configVps, config, isDev);
            return code;
        },
        configureServer() {
            isDev = true;
            (0, utils_1.assert)(loadHookWasCalled === false);
        }
    };
}
exports.virtualFiles = virtualFiles;
