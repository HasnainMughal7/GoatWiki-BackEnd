export { initGlobalContext };
export { getGlobalContext };
export { setGlobalContextViteDevServer };
export { setGlobalContextViteConfig };
export { getRuntimeManifest };
export { assertRuntimeManifest };
import { type ViteManifest } from './helpers';
import type { ResolvedConfig } from 'vite';
import { PluginManifest } from '../plugin/plugins/manifest/assertPluginManifest';
import type { ConfigVpsResolved } from '../plugin/plugins/config/ConfigVps';
import type { ViteDevServerEnhanced } from '../plugin/plugins/setGlobalContext';
declare type GlobalContext = ({
    isProduction: false;
    isPrerendering: false;
    viteDevServer: ViteDevServerEnhanced;
    config: ResolvedConfig;
    configVps: ConfigVpsResolved;
    clientManifest: null;
    pluginManifest: null;
} | {
    isProduction: true;
    isPrerendering: boolean;
    clientManifest: ViteManifest;
    pluginManifest: PluginManifest;
    config: null;
    configVps: null;
    viteDevServer: null;
}) & {
    baseServer: string;
    baseAssets: null | string;
    includeAssetsImportedByServer: boolean;
};
declare function getGlobalContext(): GlobalContext;
declare function setGlobalContextViteDevServer(viteDevServer: ViteDevServerEnhanced): void;
declare function setGlobalContextViteConfig(config: ResolvedConfig): void;
declare function initGlobalContext({ isPrerendering }?: {
    isPrerendering?: true;
}): Promise<void>;
declare type RuntimeManifest = {
    baseServer: string;
    baseAssets: string;
    includeAssetsImportedByServer: boolean;
};
declare function getRuntimeManifest(configVps: ConfigVpsResolved): RuntimeManifest;
declare function assertRuntimeManifest(obj: unknown): asserts obj is RuntimeManifest & Record<string, unknown>;
