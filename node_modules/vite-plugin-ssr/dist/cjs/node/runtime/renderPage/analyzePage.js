"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzePage = void 0;
const determineClientEntry_1 = require("../../../shared/getPageFiles/analyzePageClientSide/determineClientEntry");
const utils_1 = require("../../../shared/page-configs/utils");
const utils_2 = require("../../utils");
const analyzePageClientSide_1 = require("../../../shared/getPageFiles/analyzePageClientSide");
const virtualIdPageCodeFilesImporter_1 = require("../../commons/virtualIdPageCodeFilesImporter");
function analyzePage(pageFilesAll, pageConfig, pageId) {
    if (pageConfig) {
        const isClientRouting = (0, utils_1.getConfigValue)(pageConfig, 'clientRouting', 'boolean') ?? false;
        const clientEntryPageConfig = (0, utils_1.getCodeFilePath)(pageConfig, 'clientEntry');
        const isHtmlOnly = !!clientEntryPageConfig;
        const clientEntry = isHtmlOnly ? clientEntryPageConfig : (0, determineClientEntry_1.getVPSClientEntry)(isClientRouting);
        const clientDependencies = [];
        (0, utils_2.assert)(pageConfig.configSources.onRenderHtml);
        (0, utils_2.assert)(pageConfig.configSources.onRenderClient);
        clientDependencies.push({
            id: (0, virtualIdPageCodeFilesImporter_1.getVirutalModuleIdPageCodeFilesImporter)(pageConfig.pageId2, true),
            onlyAssets: false,
            eagerlyImported: false
        });
        clientDependencies.push({
            id: (0, virtualIdPageCodeFilesImporter_1.getVirutalModuleIdPageCodeFilesImporter)(pageConfig.pageId2, false),
            onlyAssets: true,
            eagerlyImported: false
        });
        /* TODO: remove?
        Object.values(pageConfig.configSources).forEach((configSource) => {
          if (configSource.codeFilePath) {
            const { c_env } = configSource
            assert(c_env)
            const onlyAssets = c_env === 'server-only'
            const eagerlyImported = c_env === 'c_routing'
            if (onlyAssets || eagerlyImported) {
              clientDependencies.push({
                id: configSource.codeFilePath,
                onlyAssets,
                eagerlyImported
              })
            }
          }
        })
        */
        clientDependencies.push({
            id: clientEntry,
            onlyAssets: false,
            eagerlyImported: false
        });
        const clientEntries = [clientEntry];
        return {
            isHtmlOnly,
            isClientRouting,
            clientEntries,
            clientDependencies,
            // pageFilesClientSide and pageFilesServerSide are only used for debugging
            pageFilesClientSide: [],
            pageFilesServerSide: []
        };
    }
    return (0, analyzePageClientSide_1.analyzePageClientSide)(pageFilesAll, pageId);
}
exports.analyzePage = analyzePage;
