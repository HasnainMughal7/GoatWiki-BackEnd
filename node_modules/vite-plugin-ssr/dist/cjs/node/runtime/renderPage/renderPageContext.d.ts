export { renderPageContext };
export { prerenderPageContext };
export { prerender404Page };
export { loadPageFilesServer };
export { initPageContext };
export { getRenderContext };
export type { RenderContext };
export type { PageContextAfterRender };
import { type PageFile } from '../../../shared/getPageFiles';
import type { PageAsset } from './getPageAssets';
import { type PageContextUrls } from '../../../shared/addComputedUrlProps';
import { HttpResponse } from './createHttpResponseObject';
import { loadPageFilesServer, PageContext_loadPageFilesServer, type PageFiles } from './loadPageFilesServer';
import type { PageConfig } from '../../../shared/page-configs/PageConfig';
declare type GlobalRenderingContext = {
    _allPageIds: string[];
    _pageFilesAll: PageFile[];
    _pageConfigs: PageConfig[];
};
declare type PageContextAfterRender = {
    httpResponse: null | HttpResponse;
    errorWhileRendering: null | Error;
};
declare function renderPageContext<PageContext extends {
    _pageId: null | string;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    _isPageContextRequest: boolean;
    _allPageIds: string[];
    is404: null | boolean;
    routeParams: Record<string, string>;
    errorWhileRendering: null | Error;
} & PageContextUrls & PageContext_loadPageFilesServer>(pageContext: PageContext): Promise<PageContext & PageContextAfterRender>;
declare function prerenderPageContext(pageContext: {
    urlOriginal: string;
    routeParams: Record<string, string>;
    _pageId: string;
    _usesClientRouter: boolean;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: null | boolean;
    _baseServer: string;
} & PageFiles & GlobalRenderingContext): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: {
        urlOriginal: string;
        routeParams: Record<string, string>;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true | undefined;
        is404: null | boolean;
        _baseServer: string;
    } & {
        exports: Record<string, unknown>;
        exportsAll: import("../../../shared/getPageFiles/getExports").ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext & {
        _isPageContextRequest: boolean;
        _urlHandler: null;
    } & PageContextUrls;
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: {
        urlOriginal: string;
        routeParams: Record<string, string>;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true | undefined;
        is404: null | boolean;
        _baseServer: string;
    } & {
        exports: Record<string, unknown>;
        exportsAll: import("../../../shared/getPageFiles/getExports").ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext & {
        _isPageContextRequest: boolean;
        _urlHandler: null;
    } & PageContextUrls;
}>;
declare function prerender404Page(renderContext: RenderContext, pageContextInit_: Record<string, unknown> | null): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: {
        urlOriginal: string;
        routeParams: Record<string, string>;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true | undefined;
        is404: boolean | null;
        _baseServer: string;
    } & {
        exports: Record<string, unknown>;
        exportsAll: import("../../../shared/getPageFiles/getExports").ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext & {
        _isPageContextRequest: boolean;
        _urlHandler: null;
    } & PageContextUrls;
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: {
        urlOriginal: string;
        routeParams: Record<string, string>;
        _pageId: string;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true | undefined;
        is404: boolean | null;
        _baseServer: string;
    } & {
        exports: Record<string, unknown>;
        exportsAll: import("../../../shared/getPageFiles/getExports").ExportsAll;
        pageExports: Record<string, unknown>;
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<PageAsset[]>;
    } & GlobalRenderingContext & {
        _isPageContextRequest: boolean;
        _urlHandler: null;
    } & PageContextUrls;
} | null>;
declare function initPageContext(pageContextInit: {
    urlOriginal: string;
}, renderContext: RenderContext): {
    _objectCreatedByVitePluginSsr: boolean;
    _pageFilesAll: PageFile[];
    _pageConfigs: PageConfig[];
    _allPageIds: string[];
    _baseServer: string;
    _baseAssets: string | null;
    _includeAssetsImportedByServer: boolean;
    urlOriginal: string;
};
declare type RenderContext = {
    pageFilesAll: PageFile[];
    pageConfigs: PageConfig[];
    allPageIds: string[];
};
declare function getRenderContext(): Promise<RenderContext>;
