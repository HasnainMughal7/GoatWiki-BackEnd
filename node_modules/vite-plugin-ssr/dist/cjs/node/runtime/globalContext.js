"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertRuntimeManifest = exports.getRuntimeManifest = exports.setGlobalContextViteConfig = exports.setGlobalContextViteDevServer = exports.getGlobalContext = exports.initGlobalContext = void 0;
const utils_1 = require("../utils");
const helpers_1 = require("./helpers");
const loadBuild_1 = require("../plugin/plugins/importBuild/loadBuild");
const getPageFiles_1 = require("../../shared/getPageFiles");
const assertPluginManifest_1 = require("../plugin/plugins/manifest/assertPluginManifest");
const assertConfigVps_1 = require("../plugin/plugins/config/assertConfigVps");
const globalObject = (0, utils_1.getGlobalObject)('globalContext.ts', {});
function getGlobalContext() {
    (0, utils_1.assert)(globalObject.globalContext);
    return globalObject.globalContext;
}
exports.getGlobalContext = getGlobalContext;
function setGlobalContextViteDevServer(viteDevServer) {
    if (globalObject.viteDevServer)
        return;
    (0, utils_1.assert)(!globalObject.globalContext);
    globalObject.viteDevServer = viteDevServer;
}
exports.setGlobalContextViteDevServer = setGlobalContextViteDevServer;
function setGlobalContextViteConfig(config) {
    if (globalObject.config)
        return;
    (0, utils_1.assert)(!globalObject.globalContext);
    globalObject.config = config;
}
exports.setGlobalContextViteConfig = setGlobalContextViteConfig;
async function initGlobalContext({ isPrerendering } = {}) {
    if (globalObject.globalContext)
        return;
    const { viteDevServer, config } = globalObject;
    const isProduction = !viteDevServer;
    if (isProduction) {
        const buildEntries = await (0, loadBuild_1.loadBuild)();
        assertBuildEntries(buildEntries, isPrerendering ?? false);
        const { pageFiles, clientManifest, pluginManifest } = buildEntries;
        (0, getPageFiles_1.setPageFiles)(pageFiles);
        (0, helpers_1.assertViteManifest)(clientManifest);
        (0, assertPluginManifest_1.assertPluginManifest)(pluginManifest);
        globalObject.globalContext = {
            isProduction,
            isPrerendering: isPrerendering ?? false,
            clientManifest,
            pluginManifest,
            viteDevServer: null,
            config: null,
            configVps: null,
            baseServer: pluginManifest.baseServer,
            baseAssets: pluginManifest.baseAssets,
            includeAssetsImportedByServer: pluginManifest.includeAssetsImportedByServer
        };
    }
    else {
        (0, utils_1.assert)(config);
        (0, utils_1.assert)(!isPrerendering);
        const configVps = await (0, assertConfigVps_1.getConfigVps)(config);
        const pluginManifest = getRuntimeManifest(configVps);
        globalObject.globalContext = {
            isProduction,
            isPrerendering: false,
            clientManifest: null,
            pluginManifest: null,
            viteDevServer,
            config,
            configVps,
            baseServer: pluginManifest.baseServer,
            baseAssets: pluginManifest.baseAssets,
            includeAssetsImportedByServer: pluginManifest.includeAssetsImportedByServer
        };
    }
}
exports.initGlobalContext = initGlobalContext;
function getRuntimeManifest(configVps) {
    const { includeAssetsImportedByServer, baseServer, baseAssets } = configVps;
    const manifest = {
        baseServer,
        baseAssets,
        includeAssetsImportedByServer
    };
    assertRuntimeManifest(manifest);
    return manifest;
}
exports.getRuntimeManifest = getRuntimeManifest;
function assertRuntimeManifest(obj) {
    (0, utils_1.assert)(obj);
    (0, utils_1.assert)((0, utils_1.isObject)(obj));
    (0, utils_1.assert)((0, utils_1.hasProp)(obj, 'baseServer', 'string'));
    (0, utils_1.assert)((0, utils_1.hasProp)(obj, 'baseAssets', 'string'));
    (0, utils_1.assert)((0, utils_1.isBaseServer)(obj.baseServer));
    (0, utils_1.assert)((0, utils_1.isBaseAssets)(obj.baseAssets));
    (0, utils_1.assert)((0, utils_1.hasProp)(obj, 'includeAssetsImportedByServer', 'boolean'));
    (0, utils_1.checkType)(obj);
}
exports.assertRuntimeManifest = assertRuntimeManifest;
function assertBuildEntries(buildEntries, isPreRendering) {
    const errMsg = [
        `You are tyring to run`,
        isPreRendering ? 'pre-rendering' : 'the server for production',
        "but your app isn't built yet. Run `$ vite build` before ",
        isPreRendering ? 'pre-rendering.' : 'running the server.'
    ].join(' ');
    (0, utils_1.assertUsage)(buildEntries, errMsg);
}
