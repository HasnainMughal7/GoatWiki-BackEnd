"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transpileAndLoadScriptFile = void 0;
const esbuild_1 = __importDefault(require("esbuild"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const import_1 = require("@brillout/import");
const filesystemPathHandling_1 = require("./filesystemPathHandling");
const getRandomId_1 = require("./getRandomId");
async function transpileAndLoadScriptFile(scriptFile) {
    (0, filesystemPathHandling_1.assertPosixPath)(scriptFile);
    const buildResult = await build(scriptFile);
    if ('err' in buildResult) {
        return { err: buildResult.err };
    }
    const { code } = buildResult;
    const filePathTmp = getFilePathTmp(scriptFile);
    fs_1.default.writeFileSync(filePathTmp, code);
    const clean = () => fs_1.default.unlinkSync(filePathTmp);
    let exports = {};
    try {
        exports = await (0, import_1.import_)(filePathTmp);
    }
    catch (err) {
        return { err };
    }
    finally {
        clean();
    }
    // Return a plain JavaScript object
    //  - import() returns `[Module: null prototype] { default: { onRenderClient: '...' }}`
    //  - We don't need this special object
    exports = { ...exports };
    return { exports };
}
exports.transpileAndLoadScriptFile = transpileAndLoadScriptFile;
function getFilePathTmp(filePath) {
    (0, filesystemPathHandling_1.assertPosixPath)(filePath);
    const dirname = path_1.default.posix.dirname(filePath);
    const filename = path_1.default.posix.basename(filePath);
    const filePathTmp = path_1.default.posix.join(dirname, `[build:${(0, getRandomId_1.getRandomId)(12)}]${filename}.mjs`);
    return filePathTmp;
}
async function build(entry) {
    let result;
    try {
        result = await esbuild_1.default.build({
            platform: 'node',
            entryPoints: [entry],
            sourcemap: 'inline',
            write: false,
            metafile: true,
            target: ['node14.18', 'node16'],
            outfile: 'NEVER_EMITTED.js',
            logLevel: 'silent',
            format: 'esm',
            bundle: true,
            packages: 'external',
            minify: false
        });
    }
    catch (err) {
        return { err };
    }
    const { text } = result.outputFiles[0];
    return {
        code: text,
        dependencies: Object.keys(result.metafile.inputs)
    };
}
