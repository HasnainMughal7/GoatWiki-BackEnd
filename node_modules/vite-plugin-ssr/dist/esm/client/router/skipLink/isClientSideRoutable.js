export { isClientSideRoutable };
import { getPageId } from '../getPageId';
import { analyzePageClientSide, analyzePageClientSideInit } from '../../../shared/getPageFiles/analyzePageClientSide';
import { findPageConfig } from '../../../shared/page-configs/findPageConfig';
import { getCodeFilePath, getConfigValue } from '../../../shared/page-configs/utils';
async function isClientSideRoutable(url) {
    const { pageId, pageFilesAll, pageConfigs } = await getPageId(url);
    if (!pageId) {
        return false;
    }
    await analyzePageClientSideInit(pageFilesAll, pageId, { sharedPageFilesAlreadyLoaded: false });
    const pageConfig = findPageConfig(pageConfigs, pageId);
    const { isClientSideRenderable, isClientRouting } = analyze(pageConfig, pageFilesAll, pageId);
    return isClientSideRenderable && isClientRouting;
}
function analyze(pageConfig, pageFilesAll, pageId) {
    var _a;
    if (pageConfig) {
        const isClientRouting = (_a = getConfigValue(pageConfig, 'clientRouting', 'boolean')) !== null && _a !== void 0 ? _a : false;
        const isClientSideRenderable = !!getCodeFilePath(pageConfig, 'onRenderClient');
        return { isClientSideRenderable, isClientRouting };
    }
    else {
        // TOOD: globally rename isHtmlOnly to !isClientSideRenderable
        const { isHtmlOnly, isClientRouting } = analyzePageClientSide(pageFilesAll, pageId);
        return { isClientSideRenderable: !isHtmlOnly, isClientRouting };
    }
}
