export { getExportUnion };
export { getExports };
import { isScriptFile, isTemplateFile } from '../../utils/isScriptFile';
import { assert, hasProp, isObject, assertWarning, assertUsage, makeLast, isBrowser, objectEntries } from '../utils';
import { assertDefaultExports, forbiddenDefaultExports } from './assertExports';
import { getSourceFilePath } from '../page-configs/utils';
function getExports(pageFiles, pageConfig) {
    const exportsAll = {};
    // VPS 0.4
    pageFiles.forEach((pageFile) => {
        const exportValues = getExportValues(pageFile);
        exportValues.forEach(({ exportName, exportValue, isFromDefaultExport }) => {
            var _a;
            assert(exportName !== 'default');
            exportsAll[exportName] = (_a = exportsAll[exportName]) !== null && _a !== void 0 ? _a : [];
            exportsAll[exportName].push({
                exportValue,
                exportSource: `${pageFile.filePath} > ${isFromDefaultExport ? `\`export default { ${exportName} }\`` : `\`export { ${exportName} }\``}`,
                filePath: pageFile.filePath,
                _filePath: pageFile.filePath,
                _fileType: pageFile.fileType,
                _isFromDefaultExport: isFromDefaultExport
            });
        });
    });
    // VPS 1.0
    if (pageConfig) {
        const { configValues } = pageConfig;
        objectEntries(configValues).forEach(([configName, configValue]) => {
            var _a;
            const exportName = configName;
            const configSrc = getSourceFilePath(pageConfig, configName);
            assert(configSrc);
            exportsAll[exportName] = (_a = exportsAll[exportName]) !== null && _a !== void 0 ? _a : [];
            exportsAll[exportName].push({
                exportValue: configValue,
                exportSource: configSrc,
                filePath: configSrc,
                _filePath: configSrc,
                _fileType: null,
                _isFromDefaultExport: null
            });
        });
    }
    const pageExports = createObjectWithDeprecationWarning();
    const exports = {};
    Object.entries(exportsAll).forEach(([exportName, values]) => {
        values.forEach(({ exportValue, _fileType, _isFromDefaultExport }) => {
            var _a;
            exports[exportName] = (_a = exports[exportName]) !== null && _a !== void 0 ? _a : exportValue;
            // Legacy `pageContext.pageExports`
            if (_fileType === '.page' && !_isFromDefaultExport) {
                if (!(exportName in pageExports)) {
                    pageExports[exportName] = exportValue;
                }
            }
        });
    });
    assert(!('default' in exports));
    assert(!('default' in exportsAll));
    return {
        exports,
        exportsAll,
        pageExports
    };
}
function getExportValues(pageFile) {
    const { filePath, fileExports } = pageFile;
    assert(fileExports); // assume pageFile.loadFile() was called
    assert(isScriptFile(filePath));
    const exportValues = [];
    Object.entries(fileExports)
        .sort(makeLast(([exportName]) => exportName === 'default')) // `export { bla }` should override `export default { bla }`
        .forEach(([exportName, exportValue]) => {
        let isFromDefaultExport = exportName === 'default';
        if (isFromDefaultExport) {
            if (isTemplateFile(filePath)) {
                exportName = 'Page';
            }
            else {
                assertUsage(isObject(exportValue), `The \`export default\` of ${filePath} should be an object.`);
                Object.entries(exportValue).forEach(([defaultExportName, defaultExportValue]) => {
                    assertDefaultExports(defaultExportName, filePath);
                    exportValues.push({
                        exportName: defaultExportName,
                        exportValue: defaultExportValue,
                        isFromDefaultExport
                    });
                });
                return;
            }
        }
        exportValues.push({
            exportName,
            exportValue,
            isFromDefaultExport
        });
    });
    exportValues.forEach(({ exportName, isFromDefaultExport }) => {
        assert(!(isFromDefaultExport && forbiddenDefaultExports.includes(exportName)));
    });
    return exportValues;
}
function createObjectWithDeprecationWarning() {
    return new Proxy({}, {
        get(...args) {
            // We only show the warning in Node.js because when using Client Routing Vue integration uses `Object.assign(pageContextReactive, pageContext)` which will wrongully trigger the warning. There is no cross-browser way to catch whether the property accessor was initiated by an `Object.assign()` call.
            if (!isBrowser()) {
                assertWarning(false, '`pageContext.pageExports` is outdated. Use `pageContext.exports` instead, see https://vite-plugin-ssr.com/exports', { onlyOnce: true, showStackTrace: true });
            }
            return Reflect.get(...args);
        }
    });
}
function getExportUnion(exportsAll, propName) {
    var _a, _b;
    return ((_b = (_a = exportsAll[propName]) === null || _a === void 0 ? void 0 : _a.map((e) => {
        assertUsage(hasProp(e, 'exportValue', 'string[]'), `${e.exportSource} should be an array of strings.`);
        return e.exportValue;
    }).flat()) !== null && _b !== void 0 ? _b : []);
}
